DROP TABLE vote_notes IF EXISTS;
DROP TABLE user_roles IF EXISTS;
DROP TABLE dishes IF EXISTS;
DROP TABLE restaurants IF EXISTS;
DROP TABLE users IF EXISTS;


DROP SEQUENCE global_seq IF EXISTS;

CREATE SEQUENCE GLOBAL_SEQ AS INTEGER START WITH 100000;

CREATE TABLE users (
  id               INTEGER GENERATED BY DEFAULT AS SEQUENCE GLOBAL_SEQ PRIMARY KEY,
  name             VARCHAR(255)            NOT NULL,
  email            VARCHAR(255)            NOT NULL,
  password         VARCHAR(255)            NOT NULL,
  registered       TIMESTAMP DEFAULT now()
);
CREATE UNIQUE INDEX users_unique_email_idx ON USERS (email);


CREATE TABLE user_roles
(
  user_id INTEGER                        NOT NULL,
  role    VARCHAR(255)                     NOT NULL,
  CONSTRAINT user_roles_idx UNIQUE (user_id, role),
  FOREIGN KEY (user_id) REFERENCES users (id) ON DELETE CASCADE
);

CREATE TABLE restaurants (
  id               INTEGER GENERATED BY DEFAULT AS SEQUENCE GLOBAL_SEQ PRIMARY KEY,
  name             VARCHAR(255)            NOT NULL,
  city             VARCHAR(255)            NOT NULL,
  street           VARCHAR(255)            NOT NULL,
  building         INTEGER                 NOT NULL
);

CREATE TABLE vote_notes(
  date             DATE      ,
  restaurant_id    INTEGER                 NOT NULL,
  user_id          INTEGER                 ,
  PRIMARY KEY (date, user_id),
  FOREIGN KEY (restaurant_id) REFERENCES restaurants (id) ON DELETE CASCADE,
  FOREIGN KEY (user_id) REFERENCES users (id) ON DELETE CASCADE
);

CREATE TABLE dishes(
  id               INTEGER GENERATED BY DEFAULT AS SEQUENCE GLOBAL_SEQ PRIMARY KEY,
  name             VARCHAR(255)            NOT NULL,
  price            FLOAT                   NOT NULL,
  restaurant_id    INTEGER                 NOT NULL,
  date             DATE DEFAULT now()      NOT NULL,

  CONSTRAINT date_restaurant_name_idx UNIQUE (date, restaurant_id, name),
  FOREIGN KEY (restaurant_id) REFERENCES RESTAURANTS (id) ON DELETE CASCADE
);